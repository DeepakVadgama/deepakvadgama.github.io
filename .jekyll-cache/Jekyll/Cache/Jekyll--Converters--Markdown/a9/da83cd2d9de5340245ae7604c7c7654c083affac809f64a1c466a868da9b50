I"<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">While I was playing with primitive Java threadpool, the world seems to have moved on to such wonderful constructs. <a href="https://t.co/YT5u8P0j5l">https://t.co/YT5u8P0j5l</a></p>&mdash; Deepak (@deepakvadgama) <a href="https://twitter.com/deepakvadgama/status/1066574109964931073?ref_src=twsrc%5Etfw">November 25, 2018</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><br />
Recently I have been exploring concurrency features of other languages with fascination. It started with go co-routines, and then I discovered articles by <a href="https://twitter.com/vorpalsmith">Nathaniel Smith</a> - creator of Python Trio library for concurrency - which piqued my interest to 11.</p>

<p>Concurrency using message passing (as opposed to memory sharing) is an utterly beautiful paradigm. It will soon become relevant to Java developers with <a href="http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html">Project Loom aka Java Fibers</a> aka light-weight threads in Java.</p>

<p>I recommend these related articles which I found most helpful</p>

<h3 id="co-routines">Co-routines</h3>

<ul>
  <li>
    <p><strong><a href="https://www.youtube.com/watch?v=f6kdp27TYZs">go concurrency patterns</a></strong> - This was my first introduction to co-routines. Pure elegance.</p>
  </li>
  <li>
    <p><strong><a href="https://spinroot.com/courses/summer/Papers/hoare_1978.pdf">CSP paper</a></strong> - This paper was the foundation of co-routines in go.</p>
  </li>
  <li>
    <p><strong><a href="https://vorpus.org/blog/timeouts-and-cancellation-for-humans/">Timeouts and cancellation for humans</a></strong> - How timeouts should be implemented in IO libaries and extended to use cancellation tokens.</p>
  </li>
  <li>
    <p><strong><a href="https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/">Notes on Structured Concurrency</a></strong> - Once you grasp concept of goroutines, this article is a must read. It addresses pitfalls of goroutines. This was also a reference for Kotlin’s <a href="https://kotlinlang.org/docs/reference/coroutines-overview.html">coroutine implementation</a>. I have never read such clear explanation of such difficult topic before.</p>
  </li>
  <li>
    <p><strong><a href="https://www.youtube.com/watch?v=i-R704I8ySE">Python Trio concurrency library</a></strong> - Introduction to Python’s Trio library (which uses structured concurrency) by its creator Nathaniel Smith.</p>
  </li>
  <li>
    <p><strong><a href="http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">What color is your function?</a></strong> - After promises/futures and rx libraries, async-await is the newest tool being added in many languages. This article explores how some languages force developers to label asynchronous functions all they way up the call stack.</p>
  </li>
</ul>

<h2 id="bucket-list">Bucket list</h2>

<p>In addition to coroutines, there are some features I plan to explore soon</p>

<ul>
  <li>
    <p><strong>Borrow Checker (Rust)</strong> - How Rust enforces variable ownership/lifetimes at compile time, in effect making language safer at runtime.</p>
  </li>
  <li>
    <p><strong>yeid/generator functions (Dart/Kotlin)</strong> - Functions that generate asynchronous streams of values.</p>
  </li>
  <li>
    <p><strong>Dispatchers (Kotlin)</strong> - Choosing the pool/thread where the async function runs/returns. More useful for Android/JS with single UI thread I think.</p>
  </li>
</ul>

<h3 id="kotlin">Kotlin</h3>
<p>I have high hopes for Kotlin. It incorporates many of the above mentioned <a href="https://kotlinlang.org/docs/reference/coroutines/coroutines-guide.html">concurrency features</a>. Also, being source compatible with Java, it acts as an <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutines-guide.md">easier ramp</a> onto these wonderful constructs.</p>

<p>If you have any similar recommendations please let me know in the comments.</p>

:ET