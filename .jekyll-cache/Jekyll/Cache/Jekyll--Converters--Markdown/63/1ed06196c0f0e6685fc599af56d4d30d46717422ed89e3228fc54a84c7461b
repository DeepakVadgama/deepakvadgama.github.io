I".<p>Logging is one of the most fundamental aspects of any language.
Unfortunately, Java’s in-built logging mechanism <code class="highlighter-rouge">java.util.logging</code> (available since JDK 1.4) was <a href="https://stackoverflow.com/a/11360517/3494368">not feature rich nor flexible enough</a> for most use-cases.
The community created multiple libraries to fill in this gap.</p>

<p>After more than a decade, the logging ecosystem has become quite complicated with each library using its own logging mechanism. Even standard projects’ dependencies look like this.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">+-</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="nl">web:jar:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">:</span><span class="n">compile</span>
<span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">|</span>  <span class="o">+-</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="nl">starter:jar:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">:</span><span class="n">compile</span>
<span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">|</span>  <span class="o">|</span>  <span class="o">+-</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="nl">logging:jar:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">:</span><span class="n">compile</span>
<span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">+-</span> <span class="n">ch</span><span class="o">.</span><span class="na">qos</span><span class="o">.</span><span class="na">logback</span><span class="o">:</span><span class="n">logback</span><span class="o">-</span><span class="nl">classic:jar:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">11</span><span class="o">:</span><span class="n">compile</span>
<span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="err">\</span><span class="o">-</span> <span class="n">ch</span><span class="o">.</span><span class="na">qos</span><span class="o">.</span><span class="na">logback</span><span class="o">:</span><span class="n">logback</span><span class="o">-</span><span class="nl">core:jar:</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">11</span><span class="o">:</span><span class="n">compile</span>
<span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">+-</span> <span class="n">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">:</span><span class="n">jcl</span><span class="o">-</span><span class="n">over</span><span class="o">-</span><span class="nl">slf4j:jar:</span><span class="mf">1.7</span><span class="o">.</span><span class="mi">24</span><span class="o">:</span><span class="n">compile</span>
<span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="o">+-</span> <span class="n">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">:</span><span class="n">jul</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="nl">slf4j:jar:</span><span class="mf">1.7</span><span class="o">.</span><span class="mi">24</span><span class="o">:</span><span class="n">compile</span>
<span class="o">[</span><span class="no">INFO</span><span class="o">]</span> <span class="o">|</span>  <span class="o">|</span>  <span class="o">|</span>  <span class="err">\</span><span class="o">-</span> <span class="n">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">:</span><span class="n">log4j</span><span class="o">-</span><span class="n">over</span><span class="o">-</span><span class="nl">slf4j:jar:</span><span class="mf">1.7</span><span class="o">.</span><span class="mi">24</span><span class="o">:</span><span class="n">compile</span></code></pre></figure>

<p>and some conversations make no sense.</p>

<figure style="max-width: 600px; margin-left: auto; margin-right: auto">
    <a href="https://deepakvadgama.com/images/blog/logging/spring-logging.png"><img src="https://deepakvadgama.com/images/blog/logging/spring-logging.png" /></a>
</figure>

<p>Let us try to understand how we got here.</p>

<p>If you are new to Java logging, refer to <a href="https://www.loggly.com/ultimate-guide/java-logging-basics/">this article</a>
to understand its features.</p>

<h2 id="basics">Basics</h2>

<p><code class="highlighter-rouge">log4j</code> was most used logging library in the beginning.
Once configured, using it in the code was relatively simple.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">org.apache.log4j.Logger</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogExample</span> <span class="o">{</span>

    <span class="kd">final</span> <span class="kd">static</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">LogExample</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"important log statement"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h2 id="facades">Facades</h2>

<p>Though, using <code class="highlighter-rouge">log4j</code> classes directly in the code results in tight coupling.
The solution to reduce this coupling was to introduce <a href="https://en.wikipedia.org/wiki/SLF4J">Simple Logging Facade for Java</a> aka <code class="highlighter-rouge">slf4j</code>;
a library which delegated the calls to the underlying logging implementation (eg: <code class="highlighter-rouge">log4j</code> or <code class="highlighter-rouge">logback</code>) based on runtime binding.</p>

<figure>
    <a href="https://deepakvadgama.com/images/blog/logging/slf4j.png"><img src="https://deepakvadgama.com/images/blog/logging/slf4j.png" /></a>
</figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogExample</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">LogExample</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"important log statement"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h2 id="bridges">Bridges</h2>

<p>Unfortunately, the community could not standardize on single facade to use.
Many Java libraries used different facades (eg: <code class="highlighter-rouge">JCL</code> aka Jakarta Commons Logging) or in many cases direct implementations (ignoring the tight coupling problem).</p>

<p>This created a bigger problem.
Suppose you want to create a project and log with combination of <code class="highlighter-rouge">slf4j</code> and <code class="highlighter-rouge">logback</code>.
So far so good.
But what if you want to import a library say, Guava, and that in turn uses <code class="highlighter-rouge">java.util.logging</code>
How would your <code class="highlighter-rouge">slf4j</code> or <code class="highlighter-rouge">logback</code> know about that library’s logging mechanism?
Also, it is impractical to be aware of all libraries’ logging implementations and configure them separately in your project.</p>

<figure>
    <a href="https://deepakvadgama.com/images/blog/logging/logging_bridge_problem.png"><img src="https://deepakvadgama.com/images/blog/logging/logging_bridge_problem.png" /></a>
</figure>

<p>Thus, a <code class="highlighter-rouge">bridge</code> (aka adaptor) was introduced, which would redirect all those logs called via <code class="highlighter-rouge">java.util.logging</code> to <code class="highlighter-rouge">slf4j</code>.</p>

<figure>
    <a href="https://deepakvadgama.com/images/blog/logging/logging_bridge_solution.png"><img src="https://deepakvadgama.com/images/blog/logging/logging_bridge_solution.png" /></a>
</figure>

<p>Problem solved. Now as long as you have the right bridge(s) for all the logging libraries
being used (directly and indirectly) in your project, all the logs will be flown/streamed
into <code class="highlighter-rouge">slf4j</code> and into your final logging implementation.</p>

<p><code class="highlighter-rouge">slf4j</code> has all the bridges you will ever need.</p>

<figure>
    <a href="https://deepakvadgama.com/images/blog/logging/slf4j_bridges.png"><img src="https://deepakvadgama.com/images/blog/logging/slf4j_bridges.png" /></a>
</figure>
<p><em><a href="https://www.slf4j.org/images/legacy.png">Image Source</a></em></p>

<p>The best part of this solution is – all the bridges are bound/configured automatically at runtime.
Of course, the problem of which permutation-combination to use will still require including/excluding the right bridges/facades from your pom.xml. Though framework developers do <a href="https://jira.spring.io/browse/SPR-14512">think hard</a> to make it easy for the developers.</p>

<p>Hit me up in the comments for any queries or critiques.</p>
:ET